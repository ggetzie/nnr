upstream nnr_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
 
  server 127.0.0.1:8000 fail_timeout=0;
}
 
server {

    listen  80;
    server_name nononsense.recipes www.nononsense.recipes;
 
    client_max_body_size 4G;
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
 
    access_log /usr/local/src/nnr/logs/nginx-access.log;
    error_log /usr/local/src/nnr/logs/nginx-error.log;
 
    location /robots.txt {
         return 301 https://nnr-static.s3.amazonaws.com/static/robots.txt;
    }
    
    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 
        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
       	# proxy_set_header X-Forwarded-Proto https;
 
        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;
 
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
 
        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;
 
        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://nnr_app_server;
            break;
        }
    }
    # add_header Content-Security-Policy "default-src 'self' d1q0lpl7gly8q2.cloudfront.net js.stripe.com; style-src 'self' d1q0lpl7gly8q2.cloudfront.net stackpath.bootstrapcdn.com; script-src 'self' d1q0lpl7gly8q2.cloudfront.net js.stripe.com stackpath.bootstrapcdn.com code.jquery.com cdnjs.cloudflare.com; connect-src 'self' d1q0lpl7gly8q2.cloudfront.net js.stripe.com;";

    # listen 443 ssl; # managed by Certbot
    # ssl_certificate /etc/letsencrypt/live/nononsense.recipes/fullchain.pem; # managed by Certbot
    # ssl_certificate_key /etc/letsencrypt/live/nononsense.recipes/privkey.pem; # managed by Certbot
    # include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

 
# server {
#     if ($host = www.nononsense.recipes) {
#         return 301 https://$host$request_uri;
#     } # managed by Certbot


#     if ($host = nononsense.recipes) {
#         return 301 https://$host$request_uri;
#     } # managed by Certbot


#     listen  80;
#     server_name nononsense.recipes www.nononsense.recipes;
#     return 404; # managed by Certbot
# }
